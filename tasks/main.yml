---
- name: Lookup base ISO image file name and checksum
  set_fact:
    kickstart_iso_info: "{{ dict(file_name=(
                         item|regex_replace('.*[^\\w\\.-]([\\w\\.-]+)\\.iso.*','\\1') ),
                         checksum=(
                         item|regex_replace('.*([a-z0-9]{64,}).*','\\1') )) }}"
  loop: "{{ lookup('url', kickstart_iso_check_url, wantlist=True) }}"
  loop_control:
    label: "{{ item if item is search('[a-z0-9]{64,}') else '...' }}"
  when:
    - item is search(kickstart_iso_type)
    - item is search('[a-z0-9]{64,}')
  changed_when: no

- name: Lookup kickstart ISO images
  find:
    paths: "{{ kickstart_iso_dest }}"
    patterns: "{{ kickstart_iso_info.file_name }}_*.iso"
  register: kickstart_iso_dest_check

- name: Create kickstart ISO images
  block:
    - name: Install system packages
      become: true
      package:
        name: "{{ item }}"
        state: present
      loop: "{{ kickstart_iso_packages }}"
  rescue:
    - name: Compile xorriso
      include_tasks: xorriso.yml
  always:
    - name: Lookup base ISO image
      stat:
        path: "{{ kickstart_iso_src }}/{{ kickstart_iso_info.file_name }}.iso"
      register: kickstart_iso_src_check

    - name: Prepare base ISO image directory
      file:
        path: "{{ kickstart_iso_src }}"
        state: "directory"
        mode: 0755
      when:
        - not (kickstart_iso_src_check.stat.exists and
          kickstart_iso_src_check.stat.isreg|default('false'))

    - name: Prepare kickstart ISO images directory
      file:
        path: "{{ item.path }}"
        state: "{{ item.state }}"
        mode: 0755
      loop:
        - {path: "{{ kickstart_iso_dest }}/iso", state: 'absent'}
        - {path: "{{ kickstart_iso_dest }}/iso", state: 'directory'}

    - name: Download base ISO image (support redirect)
      command: >
        wget {{ kickstart_iso_base_url }}{{ kickstart_iso_info.file_name }}.iso
        -O {{ kickstart_iso_info.file_name }}.iso
      args:
        chdir: "{{ kickstart_iso_src }}"
        warn: no
      when:
        - not (kickstart_iso_src_check.stat.exists and
          kickstart_iso_src_check.stat.isreg|default('false'))

    - name: Verify base ISO image
      command: "sha256sum {{ kickstart_iso_info.file_name }}.iso"
      args:
        chdir: "{{ kickstart_iso_src }}"
      register: kickstart_iso_verify
      failed_when: (kickstart_iso_verify.stdout).split('  ')[0] != kickstart_iso_info.checksum

    - name: Extract base ISO image
      command: >
        xorriso -osirrox on -indev {{ kickstart_iso_src }}/{{ kickstart_iso_info.file_name }}.iso
        -extract / {{ kickstart_iso_dest }}/iso

    - name: Lookup Boot-Menu config
      command: "cat {{ kickstart_iso_dest }}/iso/{{ kickstart_iso_bios_conf_file }}"
      register: kickstart_iso_bios_conf

    - name: Lookup Boot-Menu ISO name
      set_fact:
        kickstart_iso_boot_name: "{{ kickstart_iso_bios_conf.stdout_lines|join(';')|regex_replace(
                                  '.*inst.stage2=hd:LABEL=(\\S+) quiet.*','\\1') }}"

    - name: Edit Boot-Menu config
      lineinfile:
        path: "{{ kickstart_iso_dest }}/iso/{{ item.path }}"
        state: "{{ item.state|default(omit) }}"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        insertafter: "{{ item.insertafter|default(omit) }}"
        firstmatch: "{{ item.firstmatch|default(omit) }}"
      loop:
        - {path: "{{ kickstart_iso_bios_conf_file }}", state: 'absent', regexp: '^  menu default', line: ''}
        - {path: "{{ kickstart_iso_bios_conf_file }}", regexp: '^  menu default', line: '  menu default',
           insertafter: '^  menu label \^Install', firstmatch: true}
        - {path: "{{ kickstart_iso_bios_conf_file }}",
           regexp: ".*{{ ('inst.stage2=hd:LABEL='+ kickstart_iso_boot_name +' quiet')|regex_escape() }}",
           line: "  append initrd=initrd.img inst.ks=hd:LABEL={{ kickstart_iso_boot_name }}:/kickstart.cfg
                  inst.stage2=hd:LABEL={{ kickstart_iso_boot_name }} quiet"}
        - {path: "{{ kickstart_iso_uefi_conf_file }}", regexp: '^set default=', line: 'set default="0"'}
        - {path: "{{ kickstart_iso_uefi_conf_file }}",
           regexp: ".*{{ ('inst.stage2=hd:LABEL='+ kickstart_iso_boot_name +' quiet')|regex_escape() }}",
           line: "        linuxefi /images/pxeboot/vmlinuz
                  inst.ks=hd:LABEL={{ kickstart_iso_boot_name }}:/kickstart.cfg
                  inst.stage2=hd:LABEL={{ kickstart_iso_boot_name }} quiet"}
      loop_control:
        label: "{{ item.path +': '+ item.line|replace('  ', '') }}"

    - name: Create kickstart ISO images
      include_tasks: create.yml
      loop: "{{ (kickstart_iso_network_static_hosts|default([])) + [dict(ip=kickstart_iso_network_bootproto)] }}"
      loop_control:
        loop_var: kickstart_iso_host

    - name: Clean kickstart ISO images directory
      file:
        path: "{{ kickstart_iso_dest }}/iso"
        state: absent
  when:
    - (kickstart_iso_dest_check.matched|int == 0 or
      kickstart_iso_override|bool)
