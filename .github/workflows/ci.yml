---
name: CI
on:
  schedule:
    - cron: '0 22 15 * *'  # every 15th day of month at 22:00
  push:
    branches:
      - 'master'
    tags:
      - 'v?[0-9]+\.[0-9]+\.[0-9]+'
  pull_request:

jobs:

  test:
    name: Test Ansible role
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    outputs:
      release: ${{ steps.env.outputs.release }}
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        distro:
          - alpine_latest
          - centos_latest
          - debian_latest
          - fedora_latest
          - opensuse_leap
          - opensuse_tumbleweed
          - redhat_latest
          - ubuntu_latest
        ansible: [stable]
        python-version: [3.9]
        experimental: [false]
        include:
          - {distro: alpine_latest, ansible: devel, python-version: 3.9, experimental: true}
          - {distro: debian_latest, ansible: devel, python-version: 3.9, experimental: true}
          - {distro: fedora_latest, ansible: devel, python-version: 3.9, experimental: true}
          - {distro: opensuse_leap, ansible: devel, python-version: 3.9, experimental: true}
          - {distro: opensuse_tumbleweed, ansible: devel, python-version: 3.9, experimental: true}
          - {distro: redhat_latest, ansible: devel, python-version: 3.9, experimental: true}
          - {distro: ubuntu_latest, ansible: devel, python-version: 3.9, experimental: true}
          - {distro: alpine_edge, ansible: preview, python-version: 3.9, experimental: true}
          - {distro: debian_unstable, ansible: preview, python-version: 3.9, experimental: true}
          - {distro: fedora_rawhide, ansible: preview, python-version: 3.9, experimental: true}
          - {distro: ubuntu_devel, ansible: preview, python-version: 3.9, experimental: true}

    steps:
      - name: Check out codebase
        uses: actions/checkout@v2

      - name: Set environment variables
        id: env
        run: |
          case "${{ matrix.distro }}" in
            alpine_latest)  DOCKER_IMAGE="alpine:latest";;
            alpine_edge)  DOCKER_IMAGE="alpine:edge";;
            amazonlinux_latest)  DOCKER_IMAGE="amazonlinux:latest";;
            centos_latest)  DOCKER_IMAGE="centos:latest";;
            debian_latest)  DOCKER_IMAGE="debian:latest";;
            debian_unstable)  DOCKER_IMAGE="debian:unstable";;
            fedora_latest)  DOCKER_IMAGE="fedora:latest";;
            fedora_rawhide)  DOCKER_IMAGE="fedora:rawhide";;
            opensuse_leap)  DOCKER_IMAGE="opensuse/leap:latest";;
            opensuse_tumbleweed)  DOCKER_IMAGE="opensuse/tumbleweed:latest";;
            redhat_latest)  DOCKER_IMAGE="registry.access.redhat.com/ubi8/ubi:latest";;
            ubuntu_latest)  DOCKER_IMAGE="ubuntu:latest";;
            ubuntu_devel)  DOCKER_IMAGE="ubuntu:devel";;
          esac
          echo ::set-output name=docker-image::${DOCKER_IMAGE}
          if [[ "${{ matrix.distro }}" == alpine* ]]; then
            DOCKER_COMMAND="sh -c 'sleep infinity & wait'"
          fi
          echo ::set-output name=docker-command::${DOCKER_COMMAND:-}
          if [[ ${{ github.event.ref }} =~ ^refs/tags/v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            RELEASE=true
          fi
          echo ::set-output name=release::${RELEASE:-false}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "${{ matrix.python-version }}"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox tox-gh-actions

      - name: Molecule test
        timeout-minutes: 60
        run: |
          tox
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
          ANSIBLE: ${{ matrix.ansible }}
          TEST_PYTHON_VERSION: ${{ matrix.python-version }}
          TEST_DISTRO: ${{ matrix.distro }}
          TEST_DOCKER_IMAGE: ${{ steps.env.outputs.docker-image }}
          TEST_DOCKER_COMMAND: ${{ steps.env.outputs.docker-command }}

  release:
    name: Release Ansible role
    needs: test
    if: needs.test.outputs.release == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Publish to Ansible Galaxy
        run: >
          ansible-galaxy role import --api-key ${{ secrets.ANSIBLE_GALAXY_API_KEY }}
          $(echo $GITHUB_REPOSITORY | cut -d/ -f1) $(echo $GITHUB_REPOSITORY | cut -d/ -f2)
