---
name: CI
on:
  schedule:
    - cron: '0 22 15 * *'  # every 15th day of month at 22:00
  push:
    branches:
      - 'master'
    tags:
      - 'v?[0-9]+\.[0-9]+\.[0-9]+'
  pull_request:
    branches:
      - 'master'

jobs:

  cache:
    name: Cache test dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "${{ matrix.python-version }}"

      - name: Set cache variables
        id: env
        run: |
          PYTHON_SEM_VERSION="$(python -V | sed -En 's/.*([0-9]+\.[0-9]+\.[0-9]+).*/\1/p')"
          echo ::set-output name=cache-python::${PYTHON_SEM_VERSION}
          echo ::set-output name=cache-date::$(date -u "+%Y%m%d")

      - name: Check out tox cache
        id: cache-tox
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.pythonLocation }}
            .tox
            !.tox/**/log
            !.tox/**/tmp
          key: ${{ runner.os }}-tox-${{ steps.env.outputs.cache-python }}-${{ steps.env.outputs.cache-date }}-${{ hashFiles('tox.ini') }}  # yamllint disable-line rule:line-length

      - name: Check out images cache
        id: cache-images
        uses: actions/cache@v2
        with:
          path: |
            .images/base
          key: ${{ runner.os }}-images-${{ steps.env.outputs.cache-date }}-${{ hashFiles('molecule/resources/converge.yml') }}  # yamllint disable-line rule:line-length
          restore-keys: |
            ${{ runner.os }}-images-

      - name: Install tox dependencies
        if: steps.cache-tox.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install tox tox-gh-actions
          tox --notest

      - name: Update images
        if: steps.cache-images.outputs.cache-hit != 'true'
        run: |
          set -Eeuo pipefail
          img_info_url=()
          img_base_url=()
          img_base_dir='.images/base'
          img_info_url[0]='http://mirror.centos.org/centos/8/isos/x86_64/CHECKSUM'
          img_info_url[1]='http://mirror.centos.org/centos/7/isos/x86_64/sha256sum.txt'
          img_base_url[0]='http://isoredirect.centos.org/centos/8/isos/x86_64'
          img_base_url[1]='http://isoredirect.centos.org/centos/7/isos/x86_64'
          img_type=('boot' 'NetInstall' 'dvd')
          img_file=()
          for ((i=0; i<${#img_info_url[@]}; i++)); do
            info="$(curl -s ${img_info_url[$i]} |
              grep -Eo ".*[a-z0-9]{64,}.*" |
              grep -Eo ".*${img_type[$i]}.*" )"
            file="$(echo "${info}" |
              sed -En 's/.*[^a-zA-Z0-9\._-]([a-zA-Z0-9\._-]+\.iso).*/\1/p')"
            check="$(echo "${info}" |
              sed -En 's/.*([a-z0-9]{64,}).*/\1/p')"
            url="${img_base_url[$i]}/${file}"
            if [ ! -f "${img_base_dir}/${file}" ]; then
              mkdir -p "${img_base_dir}"
              (cd "${img_base_dir}" && curl -LOsw "%{filename_effective} %{time_total}s\n" $url)
              (cd "${img_base_dir}" && echo "${check}  ${file}" | sha256sum -c --status)
            fi
            img_file[$i]="${file}"
          done
          img_files="${img_file[*]}"
          find "${img_base_dir}" -depth -mindepth 1 -maxdepth 1 \
            ! -regex "^.*/\(${img_files// /\\\|}\)$" \
            -exec rm -rf '{}' \;

  test:
    name: Test Ansible role
    needs: cache
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    outputs:
      release: ${{ steps.env.outputs.release }}
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        distro:
          - alpine_latest
          - centos_latest
          - debian_latest
          - fedora_latest
          - opensuse_leap
          - opensuse_tumbleweed
          - redhat_latest
          - ubuntu_latest
        ansible: [stable]
        python-version: [3.9]
        experimental: [false]
        include:
          - {distro: alpine_latest, ansible: devel, python-version: 3.9, experimental: true}
          - {distro: debian_latest, ansible: devel, python-version: 3.9, experimental: true}
          - {distro: fedora_latest, ansible: devel, python-version: 3.9, experimental: true}
          - {distro: opensuse_leap, ansible: devel, python-version: 3.9, experimental: true}
          - {distro: opensuse_tumbleweed, ansible: devel, python-version: 3.9, experimental: true}
          - {distro: redhat_latest, ansible: devel, python-version: 3.9, experimental: true}
          - {distro: ubuntu_latest, ansible: devel, python-version: 3.9, experimental: true}
          - {distro: alpine_edge, ansible: preview, python-version: 3.9, experimental: true}
          - {distro: debian_unstable, ansible: preview, python-version: 3.9, experimental: true}
          - {distro: fedora_rawhide, ansible: preview, python-version: 3.9, experimental: true}
          - {distro: ubuntu_devel, ansible: preview, python-version: 3.9, experimental: true}

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "${{ matrix.python-version }}"

      - name: Set test variables
        id: env
        run: |
          case "${{ matrix.distro }}" in
            alpine_latest)  DOCKER_IMAGE="alpine:latest";;
            alpine_edge)  DOCKER_IMAGE="alpine:edge";;
            amazonlinux_latest)  DOCKER_IMAGE="amazonlinux:latest";;
            centos_latest)  DOCKER_IMAGE="centos:latest";;
            debian_latest)  DOCKER_IMAGE="debian:latest";;
            debian_unstable)  DOCKER_IMAGE="debian:unstable";;
            fedora_latest)  DOCKER_IMAGE="fedora:latest";;
            fedora_rawhide)  DOCKER_IMAGE="fedora:rawhide";;
            opensuse_leap)  DOCKER_IMAGE="opensuse/leap:latest";;
            opensuse_tumbleweed)  DOCKER_IMAGE="opensuse/tumbleweed:latest";;
            redhat_latest)  DOCKER_IMAGE="registry.access.redhat.com/ubi8/ubi:latest";;
            ubuntu_latest)  DOCKER_IMAGE="ubuntu:latest";;
            ubuntu_devel)  DOCKER_IMAGE="ubuntu:devel";;
          esac
          echo ::set-output name=docker-image::${DOCKER_IMAGE}
          if [[ "${{ matrix.distro }}" == alpine* ]]; then
            DOCKER_COMMAND="sh -c 'sleep infinity & wait'"
          fi
          echo ::set-output name=docker-command::${DOCKER_COMMAND:-}
          if [[ ${{ github.ref }} =~ ^refs/tags/v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            RELEASE=true
          fi
          echo ::set-output name=release::${RELEASE:-false}
          PYTHON_SEM_VERSION="$(python -V | sed -En 's/.*([0-9]+\.[0-9]+\.[0-9]+).*/\1/p')"
          echo ::set-output name=cache-python::${PYTHON_SEM_VERSION}
          echo ::set-output name=cache-date::$(date -u "+%Y%m")

      - name: Check out tox cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.pythonLocation }}
            .tox
            !.tox/**/log
            !.tox/**/tmp
          key: ${{ runner.os }}-tox-${{ steps.env.outputs.cache-python }}-${{ steps.env.outputs.cache-date }}-${{ hashFiles('tox.ini') }}  # yamllint disable-line rule:line-length

      - name: Check out images cache
        uses: actions/cache@v2
        with:
          path: |
            .images/base
          key: ${{ runner.os }}-images-${{ steps.env.outputs.cache-date }}-${{ hashFiles('molecule/resources/converge.yml') }}  # yamllint disable-line rule:line-length

      - name: Molecule test
        timeout-minutes: 60
        run: |
          tox
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
          ANSIBLE: ${{ matrix.ansible }}
          TEST_DISTRO: ${{ matrix.distro }}
          TEST_DOCKER_IMAGE: ${{ steps.env.outputs.docker-image }}
          TEST_DOCKER_COMMAND: ${{ steps.env.outputs.docker-command }}

  release:
    name: Release Ansible role
    needs: test
    if: needs.test.outputs.release == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Publish to Ansible Galaxy
        run: >
          ansible-galaxy role import --api-key ${{ secrets.ANSIBLE_GALAXY_API_KEY }}
          $(echo $GITHUB_REPOSITORY | cut -d/ -f1) $(echo $GITHUB_REPOSITORY | cut -d/ -f2)
